{
    "docs": [
        {
            "location": "/", 
            "text": "tweaked.info\n\n\ntweaked.info is a \nCourse Definition Format\n and ecosystem of tools. \n\n\nHistory of the Project\n\n\ntweaked.info started life as the data format for an experimental cloud-based LMS called \nImpressory\n, that was shortlisted in The Australian Innovation Challenge a few years ago. Impressory bridges in-class and out-of-class interaction, and took advantage of there being a great wealth of social sites to draw in content from. In-class, it lets students chat up onto the main lecture screen, answering each others' questions as a side-channel to the lecture content. Out-of-class, it resembles a social news stream, with the same side chat-channel so the conversation could continue.\n\n\nThe same format was then used for a system for smart and social assessment, \nAssessory\n. This started out supporting critique processes for studio courses, so that students can present and respond to each others' work while the work is still in progress.\n\n\nHowever, as the same format had proved useful for two quite different ed-tech systems, it became apparent that it'd be useful to extract the course definition format. That way, courses could be placed under version control and tracked and developed in a more coherent manner, rather than the current situation in most universities (where course definitions are fragmented across the unit catalogue, internal committee documents and approval systems, the LMS, and probably several assessment systems). \n\n\nIt also drew somewhat from noticing that when edX was first built (in a hurry), they used an XML definition language, and when it was re-engineered, some of the original teams didn't want to move away from it. OpenEdX does now have an (XML) definition language, but apart from XML being a little unwieldy these days, it's also too closely tied to a single LMS.\n\n\nSome additional possibilities were presented at StartupWeekend Edu in Sydney in 2014, but for the moment we'll start with course modelling, course self-publishing, and simple tools for course-planning. \n\n\nModelling\n\n\nThis is a bit on how the models were developed. As the code is ported across into repositories under \"tweakedinfo\", it'll change to show the projects...\n\n\nScala case classes\n\n\nThe fundamental domain items (courses, content items, pre-requisite structures, etc) were first modelled as Scala case classes. This isn't intended to be the end-user format, but gives a concise, clear, and type-checkable central definition that also translates easily into other formats and can be used across the JVM (via Scala) and JavaScript (via Scala.js)\n\n\nThis also allows automated tests to be written, for example to ensure that course plans are possible given the pre-requsite structures and offerings of the subjects within them.\n\n\nBSON and JSON formats\n\n\nThese evolved naturally -- BSON as the storage format in MongoDB, and JSON as the wire format for messaging between the server and client in Impressory and Assessory. This means we already have a number of serialisers and deserialisers for for both JavaScript and JVM languages for the case classes in question. \n\n\nThe intended definition format is \nHJSON\n, as it is a little more friendly than strict JSON, allows comments and other aspects that would be useful to allow users to keep in the definition files, and has serialisation libraries for most platforms. This lets us write a system where as well as interacting via the tooling, it is perfectly viable and supported to edit the definition files directly using any text editor (even for non-programmers such as learning designers or administrators involved in the course planning process).\n\n\nIt is also possible to construct courses directly from code (eg, in Groovy or Scala), which gives a very compact and useful format (often one I use for personal purposes). That's not intended to be the eventual storage format, however, as even though the format can be made friendly and readable, it would still allow inclusion of arbitrary code in course definition files, which could create security headaches down the track.\n\n\nPre-requisite DSL\n\n\nPre-requisites have previously been constructed as structures from the code format. Though that's quite compact and readable when writing a course in code (eg, \nFOO100 and FOO101 and cp(12)\n), it becomes more awkward to write in HJSON which does not natively support DSLs. Accordingly, there are going to be two ways to do this:\n\n\n\n\nAs structures, laid down in HJSON \n\n\nAs an expression parsed from a string\n\n\n\n\nAdditionally, in modern universities there are two kinds of pre-requisites\n\n\n\n\nThose which assume you have been studying at the same institution (eg, credit point requirements and requirements on particular units), and \n\n\nthose which only assume prior knowledge (eg, pre-requisites for first year units where your previous study is likely to have been at school, another university, or in employment)\n\n\n\n\nWhile at StartupWeekend Edu, we talked about pre-requisites as a bipartate graph between topics and courses that require or supply them, tweaked.info is going to support both.\n\n\nTooling\n\n\nThough the format has been around for a while (Impressory is more than five years old now), I've built prototypes of a number of tools using the course format, including:\n\n\n\n\nCourse preview sites\n\n\nCourse accreditation mappings (AQF and ACS CBOK)\n\n\nAutomated testing of recommended course plans against pre-requisites and offerings\n\n\nInteractive course planners for students", 
            "title": "tweaked.info"
        }, 
        {
            "location": "/#tweakedinfo", 
            "text": "tweaked.info is a  Course Definition Format  and ecosystem of tools.", 
            "title": "tweaked.info"
        }, 
        {
            "location": "/#history-of-the-project", 
            "text": "tweaked.info started life as the data format for an experimental cloud-based LMS called  Impressory , that was shortlisted in The Australian Innovation Challenge a few years ago. Impressory bridges in-class and out-of-class interaction, and took advantage of there being a great wealth of social sites to draw in content from. In-class, it lets students chat up onto the main lecture screen, answering each others' questions as a side-channel to the lecture content. Out-of-class, it resembles a social news stream, with the same side chat-channel so the conversation could continue.  The same format was then used for a system for smart and social assessment,  Assessory . This started out supporting critique processes for studio courses, so that students can present and respond to each others' work while the work is still in progress.  However, as the same format had proved useful for two quite different ed-tech systems, it became apparent that it'd be useful to extract the course definition format. That way, courses could be placed under version control and tracked and developed in a more coherent manner, rather than the current situation in most universities (where course definitions are fragmented across the unit catalogue, internal committee documents and approval systems, the LMS, and probably several assessment systems).   It also drew somewhat from noticing that when edX was first built (in a hurry), they used an XML definition language, and when it was re-engineered, some of the original teams didn't want to move away from it. OpenEdX does now have an (XML) definition language, but apart from XML being a little unwieldy these days, it's also too closely tied to a single LMS.  Some additional possibilities were presented at StartupWeekend Edu in Sydney in 2014, but for the moment we'll start with course modelling, course self-publishing, and simple tools for course-planning.", 
            "title": "History of the Project"
        }, 
        {
            "location": "/#modelling", 
            "text": "This is a bit on how the models were developed. As the code is ported across into repositories under \"tweakedinfo\", it'll change to show the projects...", 
            "title": "Modelling"
        }, 
        {
            "location": "/#scala-case-classes", 
            "text": "The fundamental domain items (courses, content items, pre-requisite structures, etc) were first modelled as Scala case classes. This isn't intended to be the end-user format, but gives a concise, clear, and type-checkable central definition that also translates easily into other formats and can be used across the JVM (via Scala) and JavaScript (via Scala.js)  This also allows automated tests to be written, for example to ensure that course plans are possible given the pre-requsite structures and offerings of the subjects within them.", 
            "title": "Scala case classes"
        }, 
        {
            "location": "/#bson-and-json-formats", 
            "text": "These evolved naturally -- BSON as the storage format in MongoDB, and JSON as the wire format for messaging between the server and client in Impressory and Assessory. This means we already have a number of serialisers and deserialisers for for both JavaScript and JVM languages for the case classes in question.   The intended definition format is  HJSON , as it is a little more friendly than strict JSON, allows comments and other aspects that would be useful to allow users to keep in the definition files, and has serialisation libraries for most platforms. This lets us write a system where as well as interacting via the tooling, it is perfectly viable and supported to edit the definition files directly using any text editor (even for non-programmers such as learning designers or administrators involved in the course planning process).  It is also possible to construct courses directly from code (eg, in Groovy or Scala), which gives a very compact and useful format (often one I use for personal purposes). That's not intended to be the eventual storage format, however, as even though the format can be made friendly and readable, it would still allow inclusion of arbitrary code in course definition files, which could create security headaches down the track.", 
            "title": "BSON and JSON formats"
        }, 
        {
            "location": "/#pre-requisite-dsl", 
            "text": "Pre-requisites have previously been constructed as structures from the code format. Though that's quite compact and readable when writing a course in code (eg,  FOO100 and FOO101 and cp(12) ), it becomes more awkward to write in HJSON which does not natively support DSLs. Accordingly, there are going to be two ways to do this:   As structures, laid down in HJSON   As an expression parsed from a string   Additionally, in modern universities there are two kinds of pre-requisites   Those which assume you have been studying at the same institution (eg, credit point requirements and requirements on particular units), and   those which only assume prior knowledge (eg, pre-requisites for first year units where your previous study is likely to have been at school, another university, or in employment)   While at StartupWeekend Edu, we talked about pre-requisites as a bipartate graph between topics and courses that require or supply them, tweaked.info is going to support both.", 
            "title": "Pre-requisite DSL"
        }, 
        {
            "location": "/#tooling", 
            "text": "Though the format has been around for a while (Impressory is more than five years old now), I've built prototypes of a number of tools using the course format, including:   Course preview sites  Course accreditation mappings (AQF and ACS CBOK)  Automated testing of recommended course plans against pre-requisites and offerings  Interactive course planners for students", 
            "title": "Tooling"
        }
    ]
}